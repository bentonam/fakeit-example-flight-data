name: Countries
type: object
key: _id
data:
  pre_run: >
    globals.current_country_index = 0;
    if (inputs.countries) {
      globals.countries = inputs.countries;
    } else {
      globals.countries = [];
      chance.get('countries').forEach(function (v, i) {
        v.region_number = i;
        globals.countries.push(v);
      });
    }
    this.data.fixed = globals.countries.length;
  post_build: >
    globals.current_country_index += 1;
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "return 'country_' + this.countryCode;"
  gdp:
    type: integer
    description: The countries GDP
    data:
      build: "return faker.random.number({min: 1000, max: 75000})"
  countryCode:
    type: string
    description: The 2 letter ISO country code
    data:
      pre_build: >
        var key = inputs.countries ? 'iso_2' : 'abbreviation';
        var code = globals.countries[globals.current_country_index][key];
        return code;
  region-number:
    type: string
    description: The countries region number
    data:
      build: >
        return globals.countries[globals.current_country_index].iso_m49 || globals.countries[globals.current_country_index].region_number || chance.integer({min: 1, max: 999});
  name:
    type: string
    description: The name of the country
    data:
      build: >
        return globals.countries[globals.current_country_index].name || globals.countries[globals.current_country_index].name || chance.country();
  updated:
    type: string
    description: The date the country was last updated
    data:
      fake: "{{date.past}}"
      post_build: "return new Date(this.updated).toISOString();"
  population:
    type: integer
    description: The countries population
    data:
      build: "return faker.random.number()"
