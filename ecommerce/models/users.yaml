name: Users
type: object
key: _id
data:
  min: 200
  max: 500
  pre_run: >
    globals.user_counter = 0;
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "return 'user_' + this.user_id;"
  doc_type:
    type: string
    description: The document type
    data:
      value: "user"
  user_id:
    type: integer
    description: The users id
    data:
        build: "return ++globals.user_counter;"
  first_name:
    type: string
    description: The users first name
    data:
      fake: "{{name.firstName}}"
  last_name:
    type: string
    description: The users last name
    data:
        fake: "{{name.lastName}}"
  username:
    type: string
    description: The users username
    data:
        fake: "{{internet.userName}}"
  password:
    type: string
    description: The users password
    data:
        fake: "{{internet.password}}"
  email_address:
    type: string
    description: The users email address
    data:
        fake: "{{internet.email}}"
  home_phone:
    type: string
    description: The users home phone
    data:
        fake: "{{phone.phoneNumber}}"
        post_build: "return this.home_phone.replace(/x[0-9]+$/, '')"
  mobile_phone:
    type: string
    description: The users mobile phone
    data:
        fake: "{{phone.phoneNumber}}"
        post_build: "return this.mobile_phone.replace(/x[0-9]+$/, '')"
  addresses:
    type: array
    description: An array of addresses
    data:
      build: >
        var addresses = [];
        for (var i = 0, rand = Math.floor(Math.random() * 3) + 1; i < rand; i++) {
          addresses.push({
            type: faker.random.arrayElement(['Home', 'Work', 'Other']),
            address_1: faker.address.streetAddress() + ' ' + faker.address.streetSuffix(),
            address_2: faker.random.boolean() ? faker.address.secondaryAddress() : '',
            locality: faker.address.city(),
            region: faker.address.stateAbbr(),
            postal_code: faker.address.zipCode(),
            country: 'US'
          });
        }
        return addresses;
  created_on:
    type: integer
    description: An epoch time of when the user was created
    data:
      fake: "{{date.past}}"
      post_build: "return new Date(this.created_on).getTime();"
