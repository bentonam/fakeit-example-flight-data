name: Routes
type: object
key: _id
data:
  pre_run: >
    if (!inputs.routes) {
      throw new Error('routes must be provided as an input');
    }
    this.data.fixed = inputs.routes.length;
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "return 'route_' + this.route_id"
  route_id:
    type: string
    description: The route id
    data:
      build: "return chance.guid()"
  doc_type:
    type: string
    description: The document type
    data:
      value: route
  airline_code:
    type: string
    description: The airlines iata / icao code of the source airport
    data:
      build: "return inputs.routes[document_index].airline_code || null"
  source_airport_code:
    type: string
    description: The source airports iata / icao code
    data:
      build: "return inputs.routes[document_index].source_airport_code || null"
  destination_airport_code:
    type: string
    description: The destination airports iata / icao code
    data:
      build: "return inputs.routes[document_index].destination_airport_code || null"
  codehsare:
    type: boolean
    description: Whether or not the route is a codeshare, meaning it is operated by another airline
    data:
      build: "return inputs.routes[document_index].codeshare === 'Y'"
  stops:
    type: integer
    description: The number of stops on the route
    data:
      build: "return inputs.routes[document_index].stops || 0"
  equipment:
    type: string
    description: The equipment used for the route if available, otherwise null
    data:
      build: "return inputs.routes[document_index].equipment || null"
  active:
    type: boolean
    description: Whether or not the route is active
    data:
      post_build: "return this.airline_code && this.source_airport_code && this.destination_airport_code ? true : false"
