name: Posts
type: object
key: _id
data:
  pre_run: >
    this.data.fixed = documents.Users.length * 10;
  dependencies:
    - Users
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "return 'post_' + this.post_id;"
  doc_type:
    type: string
    description: The document type
    data:
      value: "post"
  post_id:
    type: string
    description: The post id as a GUID
    data:
      build: "return chance.guid()"
  user_id:
    type: integer
    description: The user_id that made the post
    data:
      build: "return documents.Users[chance.integer({min:0, max: documents.Users.length - 1})].user_id"
  post_date:
    type: integer
    description: The date of the post
    data:
      build: "return new Date(chance.bool({likelihood: 30}) ? faker.date.past() : faker.date.recent()).getTime()"
  post:
    type: string
    description: The post content
    data:
      build: "return faker.lorem.sentences(chance.integer({min: 1, max: 5}))"
  visibility:
    type: string
    description: The post visibility
    data:
      build: "return faker.random.arrayElement(['public', 'public', 'private', 'public'])"
  post_access:
    type: array
    description: An array of users who can see the post if the visibility is private
    data:
      post_build: >
        var user_ids = [];
        var rand;
        var user;
        if (this.visibility === 'private') {
          user_ids.push(this.user_id);
          var rand = chance.integer({min: 1, max: 50});
          for (var i = 0; i < rand; i++) {
            user = documents.Users[chance.integer({min: 0, max: documents.Users.length -1})];
            if (user_ids.indexOf(user.user_id) === -1) {
              user_ids.push(user.user_id);
            }
          }
        }
        return user_ids;
